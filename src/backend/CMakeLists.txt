# Copyright 2017 The NXT Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set(COMMON_DIR ${CMAKE_CURRENT_SOURCE_DIR}/common)
set(METAL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/metal)
set(OPENGL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/opengl)
set(TESTS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/tests)

list(APPEND BACKEND_SOURCES
    ${COMMON_DIR}/BindGroup.cpp
    ${COMMON_DIR}/BindGroup.h
    ${COMMON_DIR}/BindGroupLayout.cpp
    ${COMMON_DIR}/BindGroupLayout.h
    ${COMMON_DIR}/BitSetIterator.h
    ${COMMON_DIR}/Builder.cpp
    ${COMMON_DIR}/Builder.h
    ${COMMON_DIR}/Buffer.cpp
    ${COMMON_DIR}/Buffer.h
    ${COMMON_DIR}/CommandAllocator.cpp
    ${COMMON_DIR}/CommandAllocator.h
    ${COMMON_DIR}/CommandBuffer.cpp
    ${COMMON_DIR}/CommandBuffer.h
    ${COMMON_DIR}/Device.cpp
    ${COMMON_DIR}/Device.h
    ${COMMON_DIR}/Forward.h
    ${COMMON_DIR}/InputState.cpp
    ${COMMON_DIR}/InputState.h
    ${COMMON_DIR}/Math.cpp
    ${COMMON_DIR}/Math.h
    ${COMMON_DIR}/PerStage.cpp
    ${COMMON_DIR}/PerStage.h
    ${COMMON_DIR}/Pipeline.cpp
    ${COMMON_DIR}/Pipeline.h
    ${COMMON_DIR}/PipelineLayout.cpp
    ${COMMON_DIR}/PipelineLayout.h
    ${COMMON_DIR}/Queue.cpp
    ${COMMON_DIR}/Queue.h
    ${COMMON_DIR}/RefCounted.cpp
    ${COMMON_DIR}/RefCounted.h
    ${COMMON_DIR}/Sampler.cpp
    ${COMMON_DIR}/Sampler.h
    ${COMMON_DIR}/ShaderModule.cpp
    ${COMMON_DIR}/ShaderModule.h
    ${COMMON_DIR}/Texture.cpp
    ${COMMON_DIR}/Texture.h
    ${COMMON_DIR}/ToBackend.h
)

# OpenGL Backend

Generate(
    LIB_NAME opengl_autogen
    LIB_TYPE STATIC
    PRINT_NAME "OpenGL backend autogenerated files"
    COMMAND_LINE_ARGS
        ${GENERATOR_COMMON_ARGS}
        -T opengl
)
target_link_libraries(opengl_autogen glfw glad nxtcpp)
target_include_directories(opengl_autogen PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(opengl_autogen PUBLIC ${GENERATED_DIR})
SetCXX14(opengl_autogen)
SetPIC(opengl_autogen)

list(APPEND BACKEND_SOURCES
    ${OPENGL_DIR}/CommandBufferGL.cpp
    ${OPENGL_DIR}/CommandBufferGL.h
    ${OPENGL_DIR}/OpenGLBackend.cpp
    ${OPENGL_DIR}/OpenGLBackend.h
    ${OPENGL_DIR}/PipelineGL.cpp
    ${OPENGL_DIR}/PipelineGL.h
    ${OPENGL_DIR}/PipelineLayoutGL.cpp
    ${OPENGL_DIR}/PipelineLayoutGL.h
    ${OPENGL_DIR}/SamplerGL.cpp
    ${OPENGL_DIR}/SamplerGL.h
    ${OPENGL_DIR}/ShaderModuleGL.cpp
    ${OPENGL_DIR}/ShaderModuleGL.h
    ${OPENGL_DIR}/TextureGL.cpp
    ${OPENGL_DIR}/TextureGL.h
)

# Metal Backend

if (APPLE)
    Generate(
        LIB_NAME metal_autogen
        LIB_TYPE STATIC
        PRINT_NAME "Metal backend autogenerated files"
        COMMAND_LINE_ARGS
            ${GENERATOR_COMMON_ARGS}
            -T metal
    )
    target_link_libraries(metal_autogen glfw glad nxtcpp "-framework QuartzCore" "-framework Metal")
    target_include_directories(metal_autogen PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
    target_include_directories(metal_autogen PUBLIC ${GENERATED_DIR})
    SetCXX14(metal_autogen)
    SetPIC(metal_autogen)

    list(APPEND BACKEND_SOURCES
        ${METAL_DIR}/MetalBackend.mm
        ${METAL_DIR}/MetalBackend.h
    )
endif()

add_library(nxt_backend SHARED ${BACKEND_SOURCES})
target_link_libraries(nxt_backend opengl_autogen glfw glad spirv-cross)
if (APPLE)
    target_link_libraries(nxt_backend metal_autogen)
endif()
target_include_directories(nxt_backend PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
SetCXX14(nxt_backend)

add_executable(backend_unittests
    ${TESTS_DIR}/BitSetIteratorTests.cpp
    ${TESTS_DIR}/CommandAllocatorTests.cpp
    ${TESTS_DIR}/MathTests.cpp
    ${TESTS_DIR}/PerStageTests.cpp
    ${TESTS_DIR}/RefCountedTests.cpp
    ${TESTS_DIR}/ToBackendTests.cpp
    ${TESTS_DIR}/UnittestsMain.cpp
)
target_link_libraries(backend_unittests nxt_backend gtest)
target_include_directories(backend_unittests PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
SetCXX14(backend_unittests)
